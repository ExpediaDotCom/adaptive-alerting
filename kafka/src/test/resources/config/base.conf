kstream.app.default {
  streams {
    bootstrap.servers = "kafkasvc:9092"
    default.key.serde = "org.apache.kafka.common.serialization.Serdes$StringSerde"
    default.value.serde = "com.expedia.www.haystack.commons.kstreams.serde.metricpoint.MetricTankSerde"
  }
  health.status.path = "/app/isHealthy"
}


ad-mapper {
  streams {
    auto.offset.reset = "earliest"
    cache.max.bytes.buffering = "0"
    commit.interval.ms = "300"
    state.dir = "/tmp/kafka-streams"

    application.id = "ad-mapper"
    default.value.serde = "com.expedia.adaptivealerting.kafka.serde.JsonPojoSerde"
    JsonPojoClass = "com.expedia.adaptivealerting.core.metrics.MetricData"
    default.timestamp.extractor = "com.expedia.adaptivealerting.kafka.serde.MetricDataTimestampExtractor"
  }

  inbound-topic = "aa-metrics"
  outbound-topic = "mapped-metrics"
  health.status.path = "/tmp/isAlive"
}

ad-manager {
  streams {
    auto.offset.reset = "earliest"
    cache.max.bytes.buffering = "0"
    commit.interval.ms = "300"
    state.dir = "/tmp/kafka-streams"

    application.id = "ad-manager"
    default.value.serde = "com.expedia.adaptivealerting.kafka.serde.JsonPojoSerde"
    JsonPojoClass = "com.expedia.adaptivealerting.core.data.MappedMetricData"
    default.timestamp.extractor = "com.expedia.adaptivealerting.kafka.serde.MappedMetricDataTimestampExtractor"
  }
  factories {
    constant-detector = "com.expedia.adaptivealerting.anomdetect.control.factory.ConstantThresholdAnomalyDetectorFactory"
    cusum-detector = "com.expedia.adaptivealerting.anomdetect.control.factory.CusumAnomalyDetectorFactory"
    ewma-detector = "com.expedia.adaptivealerting.anomdetect.control.factory.EwmaAnomalyDetectorFactory"
    pewma-detector = "com.expedia.adaptivealerting.anomdetect.control.factory.PewmaAnomalyDetectorFactory"
    rcf-detector = "com.expedia.adaptivealerting.anomdetect.randomcutforest.RandomCutForestAnomalyDetectorFactory"
  }

  inbound-topic = "mapped-metrics"
  outbound-topic = "anomalies"
  health.status.path = "/tmp/isAlive"
}

anomaly-validator {
  streams {
    auto.offset.reset = "earliest"
    cache.max.bytes.buffering = "0"
    commit.interval.ms = "300"
    state.dir = "/tmp/kafka-streams"

    application.id = "anomaly-validator"
    default.value.serde = "com.expedia.adaptivealerting.kafka.serde.JsonPojoSerde"
    JsonPojoClass = "com.expedia.adaptivealerting.core.data.MappedMetricData"
    default.timestamp.extractor = "com.expedia.adaptivealerting.kafka.serde.MappedMetricDataTimestampExtractor"
    default.deserialization.exception.handler = "org.apache.kafka.streams.errors.LogAndContinueExceptionHandler"
  }
  inbound-topic = "anomalies"
  outbound-topic = "alerts"
  health.status.path = "/tmp/isAlive"
}


//Configs for kafka topic consumers - used to verify data in the topic

anomalies-consumer {
  streams {
    auto.offset.reset = "earliest"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "com.expedia.adaptivealerting.kafka.serde.JsonPojoDeserializer"
    JsonPojoClass = "com.expedia.adaptivealerting.core.anomaly.AnomalyResult"
  }
  topic = "metrics"
  health.status.path = "/tmp/isAlive"
}

mapped-metrics-consumer {
  streams {
    auto.offset.reset = "earliest"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "com.expedia.www.haystack.commons.kstreams.serde.metricpoint.MetricPointDeserializer"
  }
  topic = "mapped-metrics"
  health.status.path = "/tmp/isAlive"
}

//Configs for producers to kafka topic - used to send test data to topics

producer {
  streams {
    acks = "all"
    retries = "0"
    key.serializer = "org.apache.kafka.common.serialization.StringSerializer"
    value.serializer = "com.expedia.www.haystack.commons.kstreams.serde.metricpoint.MetricPointSerializer"
  }
  topic = "constant-metrics"
  health.status.path = "/tmp/isAlive"
}
