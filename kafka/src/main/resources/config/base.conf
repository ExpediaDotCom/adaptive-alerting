kstream.app.default {
  streams {
    bootstrap.servers = "kafkasvc:9092"
    auto.offset.reset = "latest"
    default.key.serde = "org.apache.kafka.common.serialization.Serdes$StringSerde"
    default.value.serde = "com.expedia.adaptivealerting.kafka.serde.MappedMetricDataJsonSerde"
    default.deserialization.exception.handler = "org.apache.kafka.streams.errors.LogAndContinueExceptionHandler"
  }
  health.status.path = "/app/isHealthy"
}

ad-mapper {
  streams {
    application.id = "ad-mapper"
    timestamp.extractor = "com.expedia.adaptivealerting.kafka.processor.MetricDataTimestampExtractor"
    default.value.serde = "com.expedia.adaptivealerting.kafka.serde.MetricDataMessagePackSerde"
  }
  inbound-topic = "metrics"
  outbound-topic = "mapped-metrics"
  detector-mapping-cache-update-period = 5
  model-service-base-uri = "http://modelservice:8008"
  tracing {
    tracingStatus = "enabled"
    apiKey = "acdefghijklmnopqrstuvwxyz"
    clientId = "ad-mapper"
    endpoint = "https://localhost/span"
    queueSize = 3000
    flushInterval = 15000
    shutdownTimeout = 15000
    threadCount = 24
    }
}

ad-manager {
  streams {
    application.id = "ad-manager"
    timestamp.extractor = "com.expedia.adaptivealerting.kafka.processor.MappedMetricDataTimestampExtractor"
  }
  inbound-topic = "mapped-metrics"
  outbound-topic = "anomalies"
  detector-refresh-period = 5
  model-service-base-uri = "http://modelservice:8008"
  graphite-base-uri = "http://graphite"
  throttle-gate-likelihood = 0.05
  graphite-data-retrieval-key = "data-retrieval-key"
  tracing {
      tracingStatus = "enabled"
      apiKey = "acdefghijklmnopqrstuvwxyz"
      clientId = "ad-manager"
      endpoint = "https://localhost/span"
      queueSize = 3000
      flushInterval = 15000
      shutdownTimeout = 15000
      threadCount = 24
  }
}

a2a-mapper {
  streams {
    application.id = "anomaly-to-alert-transformer"
    timestamp.extractor = "com.expedia.adaptivealerting.kafka.processor.MappedMetricDataTimestampExtractor"
  }
  inbound-topic = "anomalies"
  outbound-topic = "alerts"
}

aa-metric-functions {
  aggregator-producer {
    bootstrap.servers = "kafkasvc:9092"
    client.id = "aa-aggregator-producer"
    key.serializer = "org.apache.kafka.common.serialization.StringSerializer"
    value.serializer = "com.expedia.adaptivealerting.kafka.serde.MetricDataMessagePackSerde$Ser"
  }

  metric-source-sink {
    metric-source = "graphite"
    urlTemplate: "samplegraphitehosturi/render?format=json&target="
    graphite-host = "samplegraphitehosturi"
    output-topic = "aa-metrics"
  }
}

visualizer {
    metric-consumer {
      bootstrap.servers = "localhost:19092"
      group.id = "my-group"
      topic = "anomalies"
      key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
      value.deserializer = "com.expedia.adaptivealerting.kafka.serde.MappedMetricDataJsonSerde$Deser"
    }
    elastic-search {
      host = "localhost"
      port1 = 9200
      port2 = 9201
      scheme = "http"
    }
}


