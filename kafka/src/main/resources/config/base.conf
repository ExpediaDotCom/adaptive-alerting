kstream.app.default {
  streams {
    bootstrap.servers = "kafkasvc:9092"
    auto.offset.reset = "latest"
    default.key.serde = "org.apache.kafka.common.serialization.Serdes$StringSerde"
    default.value.serde = "com.expedia.adaptivealerting.kafka.serde.JsonPojoSerde"
    default.deserialization.exception.handler = "org.apache.kafka.streams.errors.LogAndContinueExceptionHandler"
  }
  health.status.path = "/app/isHealthy"
}

# TODO DRY up the ad-mapper and ad-manager config. [WLW]

ad-mapper {
  streams {
    application.id = "ad-mapper"
    timestamp.extractor = "com.expedia.adaptivealerting.kafka.serde.MetricDataTimestampExtractor"
    default.value.serde = "com.expedia.adaptivealerting.kafka.serde.MetricDataSerde"
    JsonPojoClass = "com.expedia.metrics.MetricData"
  }
  inbound-topic = "metrics"
  outbound-topic = "mapped-metrics"
  detector-class-map {
    constant-detector = "com.expedia.adaptivealerting.anomdetect.constant.ConstantThresholdAnomalyDetector"
    cusum-detector = "com.expedia.adaptivealerting.anomdetect.cusum.CusumAnomalyDetector"
    ewma-detector = "com.expedia.adaptivealerting.anomdetect.ewma.EwmaAnomalyDetector"
    pewma-detector = "com.expedia.adaptivealerting.anomdetect.pewma.PewmaAnomalyDetector"
  }
  model-service-uri-template = "http://modelservice:8008/api/detectors/search/findByMetricHash?hash=%s"
}

ad-manager {
  streams {
    application.id = "ad-manager"
    timestamp.extractor = "com.expedia.adaptivealerting.kafka.serde.MappedMetricDataTimestampExtractor"
    JsonPojoClass = "com.expedia.adaptivealerting.core.data.MappedMetricData"
  }
  inbound-topic = "mapped-metrics"
  outbound-topic = "anomalies"
  detector-class-map {
    constant-detector = "com.expedia.adaptivealerting.anomdetect.constant.ConstantThresholdAnomalyDetector"
    cusum-detector = "com.expedia.adaptivealerting.anomdetect.cusum.CusumAnomalyDetector"
    ewma-detector = "com.expedia.adaptivealerting.anomdetect.ewma.EwmaAnomalyDetector"
    pewma-detector = "com.expedia.adaptivealerting.anomdetect.pewma.PewmaAnomalyDetector"
  }
  model-service-uri-template = "http://modelservice:8008/api/models/search/findByMetricHash?hash=%s"
}

# Anomaly-to-metric mapper
a2m-mapper {
  streams {
    application.id = "anomaly-to-metric-transformer"
    timestamp.extractor = "com.expedia.adaptivealerting.kafka.serde.MappedMetricDataTimestampExtractor"
    JsonPojoClass = "com.expedia.metrics.MappedMetricData"
  }
  inbound-topic = "anomalies"
  outbound-topic = "mdm"
}

a2a-mapper {
  streams {
    application.id = "anomaly-to-alert-transformer"
    timestamp.extractor = "com.expedia.adaptivealerting.kafka.serde.MappedMetricDataTimestampExtractor"
    JsonPojoClass = "com.expedia.adaptivealerting.core.data.MappedMetricData"
  }
  inbound-topic = "anomalies"
  outbound-topic = "alerts"
}

# Multi-cluster anomaly-to-metric mapper
# TODO This is not a Kafka Streams app, and we should decouple it from the kstreams config. [WLW]
mc-a2m-mapper {
  anomaly-consumer {
    bootstrap.servers = "kafkasvc:9092"
    group.id = "mc-a2m-mapper"
    topic = "anomalies"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "com.expedia.adaptivealerting.kafka.serde.AnomalyResultJsonDeserializer"
  }
  metric-producer {
    bootstrap.servers = "kafkasvc:9092"
    client.id = "mc-a2m-mapper"
    topic = "metrics"
    key.serializer = "org.apache.kafka.common.serialization.StringSerializer"
    value.serializer = "com.expedia.adaptivealerting.kafka.serde.MetricDataSerializer"
  }
}
